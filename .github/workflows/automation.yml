name: Release on PR Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - lts-3.16

jobs:
  merge-submodules:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is_lts: ${{ steps.extract.outputs.is_lts }}

    steps:
      - name: Extract Branch Name and Base Branch
        run: |
          echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "BASE_BRANCH=${{ github.event.pull_request.base.ref }}" >> $GITHUB_ENV

      - name: Merge PR in ee-server (if exists)
        run: |
          PR=$(gh pr list -R ToolJet/ee-server --head "$BRANCH_NAME" --base "$BASE_BRANCH" --state open --json number -q '.[0].number')
          if [ -n "$PR" ]; then
            echo "Found ee-server PR: #$PR"
            gh pr merge -R ToolJet/ee-server "$PR" --merge --admin
          else
            echo "No open ee-server PR for branch $BRANCH_NAME into $BASE_BRANCH"
          fi
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PR }}

      - name: Merge PR in ee-frontend (if exists)
        run: |
          PR=$(gh pr list -R ToolJet/ee-frontend --head "$BRANCH_NAME" --base "$BASE_BRANCH" --state open --json number -q '.[0].number')
          if [ -n "$PR" ]; then
            echo "Found ee-frontend PR: #$PR"
            gh pr merge -R ToolJet/ee-frontend "$PR" --merge --admin
          else
            echo "No open ee-frontend PR for branch $BRANCH_NAME into $BASE_BRANCH"
          fi
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PR }}

      - name: Extract version from title
        id: extract
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$TITLE" | grep -oE 'Version ([0-9]+\.[0-9]+(-LTS)?)' | awk '{ print $2 }')

          if [[ -z "$VERSION" ]]; then
            echo "❌ No version found in PR title"
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          if [[ "$VERSION" == *-LTS ]]; then
            echo "IS_LTS=true" >> $GITHUB_ENV
            echo "is_lts=true" >> $GITHUB_OUTPUT
          else
            echo "IS_LTS=false" >> $GITHUB_ENV
            echo "is_lts=false" >> $GITHUB_OUTPUT
          fi

  update-submodule-sha:
    needs: merge-submodules
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule foreach 'git checkout main && git pull origin main'

      - name: Commit submodule updates
        run: |
          git config user.name "ToolJet Bot"
          git config user.email "adish.madhu@gmail.com"
          git add .
          git commit -m "Update submodule SHAs after release" || echo "No changes to commit"
          git push origin HEAD:${{ github.event.pull_request.base.ref }}

  release:
    needs: update-submodule-sha
    runs-on: ubuntu-latest

    steps:
      - name: Checkout correct branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Create Git tag
        run: |
          git config user.name "ToolJet Bot"
          git config user.email "adish.madhu@gmail.com"
          git tag v${{ needs.merge-submodules.outputs.version }}
          git push origin v${{ needs.merge-submodules.outputs.version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.merge-submodules.outputs.version }}
          name: v${{ needs.merge-submodules.outputs.version }}
          generate_release_notes: true
          prerelease: ${{ needs.merge-submodules.outputs.is_lts != 'true' }}
          make_latest: ${{ needs.merge-submodules.outputs.is_lts == 'true' && 'true' || 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
