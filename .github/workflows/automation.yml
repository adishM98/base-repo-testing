name: Release on PR Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - lts-3.16

jobs:
  merge-submodules:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Extract Branch Name
        run: echo "BRANCH_NAME=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV

      - name: Merge PR in ee-server (if exists)
        run: |
          PR=$(gh pr list -R ToolJet/ee-server --head "$BRANCH_NAME" --state open --json number -q '.[0].number')
          if [ -n "$PR" ]; then
            echo "Found ee-server PR: #$PR"
            gh pr merge -R ToolJet/ee-server "$PR" --merge --admin
          else
            echo "No open ee-server PR for branch $BRANCH_NAME"
          fi
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PR }}

      - name: Merge PR in ee-frontend (if exists)
        run: |
          PR=$(gh pr list -R ToolJet/ee-frontend --head "$BRANCH_NAME" --state open --json number -q '.[0].number')
          if [ -n "$PR" ]; then
            echo "Found ee-frontend PR: #$PR"
            gh pr merge -R ToolJet/ee-frontend "$PR" --merge --admin
          else
            echo "No open ee-frontend PR for branch $BRANCH_NAME"
          fi
        env:
          GH_TOKEN: ${{ secrets.TOKEN_PR }}

  update-submodule-sha:
    needs: merge-submodules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ToolJet (Main or LTS)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          submodules: true

      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule foreach 'git checkout ${{ github.event.pull_request.base.ref }} && git pull origin ${{ github.event.pull_request.base.ref }}'
          git add .
          git config user.name "ToolJet Bot"
          git config user.email "adish.madhu@gmail.com"
          git commit -am "🔁 chore: update submodule SHAs" || echo "No changes to commit"
          git push origin ${{ github.event.pull_request.base.ref }}

  check-submodule-prs:
    needs: update-submodule-sha
    runs-on: ubuntu-latest
    steps:
      - name: Confirm submodule PRs were merged
        run: echo "✅ Verified submodule PRs were merged and SHAs updated."

  release:
    needs: check-submodule-prs
    runs-on: ubuntu-latest

    steps:
      - name: Extract version from title
        id: extract
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          VERSION=$(echo "$TITLE" | grep -oE 'Version ([0-9]+\.[0-9]+(-LTS)?)' | awk '{ print $2 }')

          if [[ -z "$VERSION" ]]; then
            echo "❌ No version found in PR title"
            exit 1
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV

          if [[ "$VERSION" == *-LTS ]]; then
            echo "IS_LTS=true" >> $GITHUB_ENV
            echo "VERSION_BASE=${VERSION%-LTS}" >> $GITHUB_ENV
            echo "is_lts=true" >> $GITHUB_OUTPUT
          else
            echo "IS_LTS=false" >> $GITHUB_ENV
            echo "VERSION_BASE=$VERSION" >> $GITHUB_ENV
            echo "is_lts=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout ToolJet
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Set up Git
        run: |
          git config user.name "ToolJet Bot"
          git config user.email "adish.madhu@gmail.com"

      - name: Create Git tag
        run: |
          TAG=v${{ env.VERSION }}
          git tag $TAG
          git push origin $TAG

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          generate_release_notes: true
          prerelease: ${{ env.IS_LTS != 'true' }}
          make_latest: ${{ env.IS_LTS == 'true' && 'true' || 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
